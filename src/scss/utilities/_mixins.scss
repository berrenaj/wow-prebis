@mixin breakpoint($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin inlinelist($prefix) {
  margin: 0;
  padding: 0;
  list-style: none;

  > li {
    display: inline-block;

    &:first-of-type {
      &:before {
        content: $prefix ": ";
      }
    }

    > a {
      font-size: $site-font-size;
      color: map-get($item-color, Agility);
      cursor: pointer;

      &.active {
        text-decoration: underline;
      }
      
      &,
      &:hover:not(.active),
      &:visited:not(.active) {
        text-decoration: none;
      }
    }

    &:after {
      content: ",";
      margin-right: 3px;
    }

    &:last-of-type {
      &:after {
        display: none;
      }
    }
  }
}

@mixin clearfix(){
  &:before,
  &:after{
    content: " "; 
    display: table; 
  }

  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  &{
    *zoom: 1;
  }
}